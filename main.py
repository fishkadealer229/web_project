import logging
import os
import sqlite3
from time import sleep

from config import token
from aiogram import Bot, Dispatcher, executor, types
bot = Bot(token=token)
dp = Dispatcher(bot)
db_values = []
register_flag = False
admin_flag = False
search_flag = False
update_flag = False
new_value = True
flag = False
flag1 = True
flag2 = False
password = ''
update_value = ''
count_values = 1
last_username = ''
blank_values = ["–ò–º—è –§–∞–º–∏–ª–∏—è", "–ü–æ–ª", "–Æ–∑–µ—Ä–Ω–µ–π–º", '–î–æ–ª–∂–Ω–æ—Å—Ç—å', "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"]
requests = ['—Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é', '—Å–≤–æ–π –ø–æ–ª', '—Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º', "—Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
            '—Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è']
ind = 0
logging.basicConfig(level=logging.INFO)
con = sqlite3.connect('meetings_data.db')
cur = con.cursor()


@dp.message_handler(commands=['start'])
async def begin(message: types.Message):
    if register_flag:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.insert(types.InlineKeyboardButton(text='–î–∞', callback_data='search'))
        keyboard.insert(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='ok'))
        await message.answer('–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?', reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.insert(types.InlineKeyboardButton(text='–í–æ–π—Ç–∏ –≤ –æ–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç', callback_data='common'))
        keyboard.insert(types.InlineKeyboardButton(text='–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∞', callback_data='admin'))
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π'
                             ' "–ù–∏–≥—ç–∑ –°—Ç—É–¥–∏–æ".', reply_markup=types.ReplyKeyboardRemove())
        await message.answer('''–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ –æ–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∞?''', reply_markup=keyboard)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.insert(types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data='admin'))
    keyboard.insert(types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫', callback_data='common'))
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫', callback_data='search'))
    keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É', callback_data='update_blank'))
    await message.answer('–í–æ—Ç, —á—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç—è—Ä–∞.', reply_markup=keyboard)


@dp.message_handler(commands=['help'])
async def help1(message: types.Message):
    await message.answer('–ß—Ç–æ!?')
    sleep(2)
    await message.answer('–ö–æ–º—É —Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –ø–æ–º–æ—â—å –≤ —ç—Ç–æ–º –Ω–∞–∏–ª–µ–≥—á–∞–π—à–µ–º –±–æ—Ç—è—Ä–µ?')
    sleep(2)
    await message.answer('OK. –ü—Ä–æ—Å—Ç–æ –ø–æ—á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥—É "workerStuffBot –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤"')
    sleep(2)
    await message.answer('–ë–µ—Å—è—Ç —É–∂–µ —ç—Ç–∏ –∫–æ–∂–∞–Ω–Ω—ã–µ üëø üëø üëø üëø')


@dp.callback_query_handler(text='common')
async def register_asks(call: types.CallbackQuery):
    global requests, ind
    telegram_values = [call.from_user.first_name + " " + call.from_user.last_name, '–ú—É–∂—á–∏–Ω–∞', call.from_user.username,
                       '', '', '']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if ind <= 2:
        keyboard.add(types.KeyboardButton(text=f'{telegram_values[ind]}'))
    if ind == 1:
        keyboard.add(types.KeyboardButton(text='–ñ–µ–Ω—â–∏–Ω–∞'))
    if ind < len(requests):
        await call.message.answer(f'–£–∫–∞–∂–∏—Ç–µ {requests[ind]}', reply_markup=keyboard)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
        await call.message.answer('–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=keyboard)
        await call.answer('–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')


@dp.callback_query_handler(text='admin')
async def admin_register(call: types.CallbackQuery):
    global blank_values, admin_flag
    admin_flag = True
    blank_values.insert(3, "–ü–∞—Ä–æ–ª—å")
    requests.insert(3, "—Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
    await register_asks(call)


@dp.callback_query_handler(text='update_blank')
async def update_blank(call: types.CallbackQuery):
    global blank_values, update_flag, register_flag, search_flag, flag1
    register_flag = False
    search_flag = False
    update_flag = True
    flag1 = True
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in blank_values:
        keyboard.add(types.KeyboardButton(text=f'{i}'))
    await call.message.answer('–ß—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç?', reply_markup=keyboard)
    await call.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã')


@dp.callback_query_handler(text='end_register')
async def end_register(call: types.CallbackQuery):
    global register_flag, admin_flag, update_flag, search_flag
    register_flag = True
    search_flag = False
    update_flag = False
    name, surname = db_values[0].split()
    path = f'\\photos\\{call.message.chat.id}.jpg'
    if admin_flag:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ', url='https://github.com/'))
        await call.message.answer('–í–æ—Ç —Å—Å—ã–ª–∫–∞.'
                                  ' –¢–∞–º –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ–π—Ç–∏ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –∏ –ø–∞—Ä–æ–ª—é, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–¥–µ—Å—å –≤–≤–µ–ª–∏.',
                                  reply_markup=types.ReplyKeyboardRemove())
        await call.message.answer('–£–¥–∞—á–∏!', reply_markup=keyboard)
        cur.execute(fr'''insert into users (name_surname, gender, username, profession, chat_id, photo_path, password) 
        values("{name + ' ' + surname}", "{db_values[1]}", "{db_values[2]}", "{db_values[3]}", "{call.message.chat.id}",
"{os.getcwd() + path}", "{db_values[4]}")''')
        con.commit()
    else:
        cur.execute(fr'''insert into users (name_surname, gender, username, profession, chat_id, photo_path, password) 
                values("{name + ' ' + surname}", "{db_values[1]}", "{db_values[2]}", "{db_values[3]}",
                 "{call.message.chat.id}", "{os.getcwd() + path}")''')
        con.commit()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.insert(types.InlineKeyboardButton(text='–î–∞', callback_data='search'))
    keyboard.insert(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='ok'))
    await call.message.answer('–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?', reply_markup=keyboard)
    await call.answer('–ü–æ–∏—Å–∫...')


@dp.callback_query_handler(text='search')
async def search(call: types.CallbackQuery):
    global search_flag, register_flag, update_flag
    search_flag = True
    register_flag = False
    update_flag = False
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å)")


@dp.callback_query_handler(text='ok')
async def ok(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å –∫–æ–≥–æ-—Ç–æ...', callback_data='search'))
    await call.message.answer('–ù—É –æ–∫...', reply_markup=keyboard)
    await call.answer('OK')


@dp.message_handler(content_types=['text'])
async def db_insert(message: types.Message):
    global db_values, register_flag, search_flag, update_flag, flag1, flag2, new_value, update_value
    if register_flag:
        await message.reply('–≠—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è. –û–ö?')
    elif search_flag:
        for value in ['name_surname', 'profession']:
            if (message.text,) in list(cur.execute(f'''select {value} from users''')):
                username = '@' + list(cur.execute(f'select username from users where {value}="{message.text}"'))[0][0]
                await message.answer(f'–í–æ—Ç –µ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º: {username}')
                break
            else:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:(')
    elif update_flag:
        new_value = True
        if new_value and message.text in blank_values:
            update_value = message.text
            new_value = False
            flag1 = True
        else:
            if flag1:
                db_values[blank_values.index(update_value)] = message.text
                flag1 = False
            else:
                flag2 = True
        if flag1:
            if message.text != "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è":
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard.add(types.KeyboardButton(text=f'{db_values[blank_values.index(update_value)]}'))
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.', reply_markup=keyboard)
            else:
                await message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏—é', callback_data='next_data'))
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
            keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
            await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
            await message.answer('–•–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
    else:
        if message.text.isdigit():
            db_values.append(int(message.text))
        else:
            db_values.append(message.text)
    if flag2:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='end_register'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='update_blank'))
        await message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
        await message.answer('–ó–∞–∫–æ–Ω—á–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=keyboard)
    elif not update_flag or (not flag1 and not new_value and flag2 and not search_flag):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='next'))
        keyboard.add(types.InlineKeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ', callback_data='next'))
        await message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
        await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?', reply_markup=keyboard)


@dp.callback_query_handler(text='next')
async def next1(call: types.CallbackQuery):
    global ind, count_values, db_values
    if count_values == len(db_values):
        ind += 1
        await register_asks(call)
        await call.answer('next_data')
        count_values += 1
    else:
        await call.answer('–í—ã –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª—ã–π –≤–æ–ø—Ä–æ—Å')


@dp.callback_query_handler(text='next_data')
async def next_data(call: types.CallbackQuery):
    await call.message.answer('OK')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='end_register'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='update_blank'))
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ', reply_markup=types.ReplyKeyboardRemove())
    await call.message.answer('–ó–∞–∫–æ–Ω—á–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=keyboard)


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
    global update_flag, last_username
    await message.answer(await message.photo[-1].download(f'\\photos\\{message.chat.id}.jpg'))
    await message.answer('–í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='update_blank'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='end_register'))
    if update_flag:
        await message.answer('–•–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard)
    else:
        await message.answer('–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=keyboard)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
